@{
    ViewData["Title"] = "Home Page";
}

<link href="~/css/calendar-table.css" rel="stylesheet" />

<div class="row no-gutters" style="padding: 0">
    <div class="col-md" style="text-align: left; color: #007bff">
        <h4 id="CalendarTitle">@ViewBag.MonthYear</h4>
    </div>

    <div class="col-md" style="text-align: right">
        
        <!-- navigation button -->
        <nav aria-label="Page Navigation">
            <ul class="pagination justify-content-end">
                <li class="page-item"><a class="page-link" href="#" onclick="prevMonth()"><</a></li>
                <li class="page-item"><a class="page-link" href="#" onclick="nextMonth()">></a></li>
            </ul>
        </nav>
    </div>
</div>

<!-- calendar -->
<div class="mb-1">
    <div class="calendar">
        <table class="month" id="tbl-calendar">
            <thead>
                <tr>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                </tr>
            </thead>
        </table>
    </div>
</div>


<!-- popup -->
<div id="modal-container">
    @*<partial name="DayModal" />*@
</div>

<script>
    $(document).ready(function () {
        getTableData('tbl-calendar');
    });

    let currentYear = @ViewBag.YearInt;
    let currentMonth = @ViewBag.MonthInt;
    let expenses = null;
    let additionals = null;
    let expensesToBeDeleted = null;
    let additionalsToBeDeleted = null;

    function getTableData(tableId) {        

        $('#' + tableId).DataTable({
            paging: false,
            ordering: false,
            serverSide: true,
            info: false,
            bFilter: false,
            responsive: true,

            ajax: {
                url: '/Home/GetCalendar?',
                type: 'POST',
                dataType: 'json',
                data: function (d) {
                    d.year = currentYear;
                    d.month = currentMonth;
                },
                dataSrc: function (data) {

                    $('#CalendarTitle').html(data.Collection.MonthYear);
                    return data.Collection.Weeks;
                }
            },
            order: [[0, 'asc']],
            columns: [
                { data: 'SundayDay' },
                { data: 'MondayDay' },
                { data: 'TuesdayDay' },
                { data: 'WednesdayDay' },
                { data: 'ThursdayDay' },
                { data: 'FridayDay' },
                { data: 'SaturdayDay' },
            ],
            columnDefs: [
                {
                    targets: [0, 1, 2, 3, 4, 5, 6],
                    render: function (data, type, row, meta) {
                        return generateCellHtml(data > 0 ? data : '');
                    }
                }
            ]
        });
    }

    function generateCellHtml(day) {        
        let obj = {
            year: currentYear,
            month: currentMonth,
            day: day
        };

        // get total sales value on the background
        GotoControllerAsync('/Home/GenerateCellHtml', 'POST', obj, false, 'html', function (response) {
            if (response !== 'null')
                $('#sale-content-' + day).html('Php &nbsp;<b>' + response.replaceAll('"','') + '</b>');
        });

        // append initial html
        let onclickFunction = day > 0 ? "onclick=\"openPopup(" + day + ");\"" : "";
        return "<div class='day-field-wrapper' " + onclickFunction + ">" +
            "<div class='day-field'>" + day + "</div>" +
            "</div>" +
            "<div class='events-wrapper' " + onclickFunction + ">" +
            "<div class='events-container' id='sale-content-" + day + "'></div>" +
            "</div>";
    }

    function openPopup(day) {       
        let obj = {
            Year: currentYear,
            Month: currentMonth,
            Day: day
        };

        GotoControllerAsync('/Home/_DayModal', 'POST', obj, false, 'html', function (response) {
            $('#modal-container').html(response);
            $('#modal-popup').modal('show');
        });
    }

    function prevMonth() {
        let min = 1;

        currentMonth = currentMonth > 1 ? currentMonth - 1 : currentMonth;
        refreshTable();
    }

    function nextMonth() {
        let max = 12;

        currentMonth = currentMonth < 12 ? currentMonth + 1 : currentMonth;
        refreshTable();
    }

    function refreshTable() {
        $('#tbl-calendar').DataTable().ajax.reload();
    }

    function onloadSales() {
        console.log('onloadSales')
    }

    //--- modal starts here ---------------
    function onchangeSales() {
        $('#total-sales').html(convertToDecimalText($('#Amount').val()));
    }

    function deleteExpenseItem(e, rowItemId) {
        let isDelete = confirm('Are you sure you want to delete?');

        if (isDelete) {
            $('#' + rowItemId).remove();
            if (e.Id > 0) {
                expenses.splice(expenses.findIndex(a => a.Id === e.Id), 1);
                expensesToBeDeleted = expensesToBeDeleted != null ? expensesToBeDeleted : [];
                expensesToBeDeleted.push({
                    Id: e.Id
                });
            }
            else
                expenses.splice(expenses.findIndex(a => a.NewId === e.NewId), 1);
        }
    }

    function deleteAdditional(e, rowItemId) {
        let isDelete = confirm('Are you sure you want to delete?');

        if (isDelete) {
            $('#' + rowItemId).remove();
            if (e.Id > 0) {
                additionals.splice(additionals.findIndex(a => a.Id === e.Id), 1);
                additionalsToBeDeleted = additionalsToBeDeleted != null ? additionalsToBeDeleted : [];
                additionalsToBeDeleted.push({
                    Id: e.Id
                });
            }
            else
                additionals.splice(additionals.findIndex(a => a.NewId === e.NewId), 1);
        }
    }

    function addItem(containerId) {
        let maxNewId = getMaxNewId(containerId == 'expenses-container');
        let viewItem = containerId == 'expenses-container' ? '_ExpenseItemView' : '_AdditionalItemView';
        let obj = {
            IsExpenses: containerId == 'expenses-container',
            NewId: maxNewId + 1
        };

        GotoControllerAsync('/Home/' + viewItem, 'POST', obj, false, 'html', function (response) {
            $('#' + containerId).append(response);
            pushNewData(containerId == 'expenses-container', maxNewId + 1);
        });
    }

    function addCashItem() {
        GotoControllerAsync('/Home/_AdditionalItem', 'POST', { IsExpenses: false }, false, 'html', function (response) {
            $('#additional-cash-container').append(response);
        });
    }

    function getMaxNewId(isExpenses) {
        let ids = null;

        ids = isExpenses 
            ? expenses != null ? expenses.map(e => { return e.NewId; }) : [0]   //-- if null then set to empty array
            : additionals != null ? additionals.map(e => { return e.NewId; }) : [0];    //-- if null then set to empty array

        return Math.max(...ids) == '-Infinity' ? 0 : Math.max(...ids);
    }

    function pushNewData(isExpenses, newMaxId) {
        if (isExpenses) {

            expenses = expenses != null ? expenses : [];    //-- if null then set to empty array
            expenses.push({
                NewId: newMaxId
            });
        }
        else {
            additionals = additionals != null ? additionals : [];   //-- if null then set to empty array
            additionals.push({
                NewId: newMaxId
            });
        }
    }

    function processDataList() {
        let newExpList = [];
        let newAddList = [];

        //--- update expenses list ----------------
        expenses.forEach((dataItem) => {
            let amountId = null;
            let descriptionId = null;

            if (dataItem.NewId > 0) {
                amountId = 'expense-amount-0-' + dataItem.NewId;
                descriptionId = 'expense-description-0-' + dataItem.NewId;
            }
            else {
                amountId = 'expense-amount-' + dataItem.Id + '-0';
                descriptionId = 'expense-description-' + dataItem.Id + '-0';
            }

            newExpList.push({
                NewId: dataItem.NewId,
                Id: dataItem.Id,
                Amount: $('#' + amountId).val(),
                Description: $('#' + descriptionId).val(),
                TransactionType: 2
            });
        });

        //--- update additional list ----------------
        additionals.forEach((dataItem) => {
            let amountId = null;
            let descriptionId = null;

            if (dataItem.NewId > 0) {
                amountId = 'additional-amount-0-' + dataItem.NewId;
                descriptionId = 'additional-description-0-' + dataItem.NewId;
            }
            else {
                amountId = 'additional-amount-' + dataItem.Id + '-0';
                descriptionId = 'additional-description-' + dataItem.Id + '-0';
            }

            newAddList.push({
                NewId: dataItem.NewId,
                Id: dataItem.Id,
                Amount: $('#' + amountId).val(),
                Description: $('#' + descriptionId).val(),
                TransactionType: 3
            });
        });

        return { Expenses: newExpList, Additionals: newAddList };
    }
    //--- modal ends here -----------------
</script>